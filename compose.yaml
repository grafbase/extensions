services:
  # Pretty much copy pasted from
  # https://www.ory.sh/docs/hydra/5min-tutorial
  # https://github.com/ory/hydra/blob/master/quickstart.yml
  #
  # I only removed the consent service as we don't use it.
  hydra:
    image: oryd/hydra:v2.2.0
    ports:
      - "4444:4444" # Public port
      - "4445:4445" # Admin port
    command: serve -c /etc/config/hydra/hydra.yml all --dev
    volumes:
      - hydra-sqlite:/var/lib/sqlite:Z
      - ./docker/hydra-config:/etc/config/hydra:Z
    environment:
      DSN: "sqlite:///var/lib/sqlite/db.sqlite?_fk=true"
      URLS_SELF_ISSUER: "http://127.0.0.1:4444"
    restart: unless-stopped
    depends_on:
      - hydra-migrate
    networks:
      - hydra

  hydra-migrate:
    image: oryd/hydra:v2.2.0
    environment:
      DSN: "sqlite:///var/lib/sqlite/db.sqlite?_fk=true"
    command: migrate -c /etc/config/hydra/hydra.yml sql -e --yes
    volumes:
      - hydra-sqlite:/var/lib/sqlite:Z
      - ./docker/hydra-config:/etc/config/hydra:Z
    restart: on-failure
    networks:
      - hydra

  # Adding a second hydra to act as a different OAuth2 provider
  hydra-2:
    image: oryd/hydra:v2.2.0
    ports:
      - "4454:4454" # Public port
      - "4455:4455" # Admin port
    command: serve -c /etc/config/hydra/hydra.yml all --dev
    volumes:
      - hydra-2-sqlite:/var/lib/sqlite:Z
      - ./docker/hydra-config:/etc/config/hydra:Z
    environment:
      DSN: "sqlite:///var/lib/sqlite/db.sqlite?_fk=true"
      URLS_SELF_ISSUER: "http://127.0.0.1:4454"
      SERVE_PUBLIC_PORT: "4454"
      SERVE_ADMIN_PORT: "4455"
    restart: unless-stopped
    depends_on:
      - hydra-migrate
    networks:
      - hydra-2

  hydra-2-migrate:
    image: oryd/hydra:v2.2.0
    environment:
      DSN: "sqlite:///var/lib/sqlite/db.sqlite?_fk=true"
    command: migrate -c /etc/config/hydra/hydra.yml sql -e --yes
    volumes:
      - hydra-2-sqlite:/var/lib/sqlite:Z
      - ./docker/hydra-config:/etc/config/hydra:Z
    restart: on-failure
    networks:
      - hydra-2

  nats:
    image: nats
    ports:
      - "4222:4222"
      - "8222:8222"
    command: >
      --jetstream
      --http_port=8222
      --user=grafbase
      --pass=grafbase
    networks: ["nats"]

  postgres-mtls:
    image: postgres:17
    container_name: postgres-mtls
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: grafbase
    ports:
      - "5433:5432"
    volumes:
      # Mount custom config files
      - ./docker/postgres-mtls/pg_config/postgresql.conf:/etc/postgresql/postgresql.conf:ro,z
      - ./docker/postgres-mtls/pg_config/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro,z

      - ./docker/postgres-mtls/pg_config/entrypoint-wrapper.sh:/usr/local/bin/entrypoint-wrapper.sh:ro,z

      - ./docker/postgres-mtls/certs/server.crt:/tmp/certs/server.crt:ro,z
      - ./docker/postgres-mtls/certs/server.key:/tmp/certs/server.key:ro,z
      - ./docker/postgres-mtls/certs/ca.crt:/tmp/certs/ca.crt:ro,z

      - ./docker/postgres-mtls/initdb:/docker-entrypoint-initdb.d:z
    command: >
      /bin/bash -c "/usr/local/bin/entrypoint-wrapper.sh postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c hba_file=/etc/postgresql/pg_hba.conf"
    networks: ["postgres"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "su - postgres -c pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:17
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: grafbase
    ports:
      - "5432:5432"
    command: postgres -c 'max_connections=200'
    networks: ["postgres"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "su - postgres -c pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Format storage for unified kafka
  kafka-format:
    image: confluentinc/cp-kafka:latest
    command: |
      bash -c "
        kafka-storage format --config /tmp/server.properties --cluster-id test-kafka-cluster-unified --ignore-formatted || exit 0
      "
    volumes:
      - kafka-data:/var/lib/kafka/data
      - ./docker/kafka/kraft-configs/kafka-unified.properties:/tmp/server.properties:ro
    restart: "no"

  # Unified Kafka broker supporting multiple authentication methods (KRaft mode)
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      kafka-format:
        condition: service_completed_successfully
    ports:
      - "9092:9092" # PLAINTEXT (no auth)
      - "9093:9093" # SASL_PLAINTEXT (SASL/PLAIN)
      - "9094:9094" # SASL_PLAINTEXT (SASL/SCRAM)
      - "9095:9095" # SSL (TLS only)
      - "9096:9096" # SSL (mTLS)
    environment:
      CLUSTER_ID: "test-kafka-cluster-unified"
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:29091
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER

      # Multiple listeners for different auth methods
      KAFKA_LISTENERS: >-
        PLAINTEXT://kafka:29092,
        PLAINTEXT_HOST://0.0.0.0:9092,
        SASL_PLAINTEXT://kafka:29093,
        SASL_PLAINTEXT_HOST_PLAIN://0.0.0.0:9093,
        SASL_PLAINTEXT_HOST_SCRAM://0.0.0.0:9094,
        SSL_HOST_TLS://0.0.0.0:9095,
        SSL_HOST_MTLS://0.0.0.0:9096,
        CONTROLLER://kafka:29091

      KAFKA_ADVERTISED_LISTENERS: >-
        PLAINTEXT://kafka:29092,
        PLAINTEXT_HOST://localhost:9092,
        SASL_PLAINTEXT://kafka:29093,
        SASL_PLAINTEXT_HOST_PLAIN://localhost:9093,
        SASL_PLAINTEXT_HOST_SCRAM://localhost:9094,
        SSL_HOST_TLS://localhost:9095,
        SSL_HOST_MTLS://localhost:9096

      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: >-
        PLAINTEXT:PLAINTEXT,
        PLAINTEXT_HOST:PLAINTEXT,
        SASL_PLAINTEXT:SASL_PLAINTEXT,
        SASL_PLAINTEXT_HOST_PLAIN:SASL_PLAINTEXT,
        SASL_PLAINTEXT_HOST_SCRAM:SASL_PLAINTEXT,
        SSL_HOST_TLS:SSL,
        SSL_HOST_MTLS:SSL,
        CONTROLLER:PLAINTEXT

      # SASL Configuration
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN,SCRAM-SHA-512
      KAFKA_LISTENER_NAME_SASL_PLAINTEXT_HOST_PLAIN_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_LISTENER_NAME_SASL_PLAINTEXT_HOST_SCRAM_SASL_ENABLED_MECHANISMS: SCRAM-SHA-512
      KAFKA_LISTENER_NAME_SASL_PLAINTEXT_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN

      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT

      # SSL Configuration for TLS and mTLS listeners
      KAFKA_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka.keystore.jks
      KAFKA_SSL_KEYSTORE_PASSWORD: keystorepassword
      KAFKA_SSL_KEY_PASSWORD: keystorepassword
      KAFKA_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/kafka.truststore.jks
      KAFKA_SSL_TRUSTSTORE_PASSWORD: truststorepassword
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""

      # Different SSL client auth for TLS vs mTLS listeners
      KAFKA_LISTENER_NAME_SSL_HOST_TLS_SSL_CLIENT_AUTH: none
      KAFKA_LISTENER_NAME_SSL_HOST_MTLS_SSL_CLIENT_AUTH: required

      # Standard Kafka settings
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_NUM_PARTITIONS: 4
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: /var/lib/kafka/data

      KAFKA_OPTS: >-
        -Djava.security.auth.login.config=/etc/kafka/kafka_server_jaas.conf
        -Dcom.sun.net.ssl.checkRevocation=false
        -Dtrust_all_cert=true
        -Dssl.TrustManagerFactory.algorithm=SunX509
    volumes:
      - kafka-data:/var/lib/kafka/data
      - ./docker/kafka/config/kafka_server_jaas_unified.conf:/etc/kafka/kafka_server_jaas.conf
      - ./docker/kafka/config/ssl:/etc/kafka/secrets
    restart: unless-stopped
    healthcheck:
      test: |
        nc -z localhost 9092 &&
        nc -z localhost 9093 &&
        nc -z localhost 9094 &&
        nc -z localhost 9095 &&
        nc -z localhost 9096 || exit 1
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 120s

  # Create SCRAM users
  kafka-scram-users:
    image: confluentinc/cp-kafka:latest
    depends_on:
      kafka:
        condition: service_healthy
    command: |
      bash -c "
        echo 'Waiting for Kafka to be ready...' &&
        sleep 3 &&
        echo 'Creating SCRAM users using PLAIN authentication...' &&
        kafka-configs --bootstrap-server localhost:9093 --command-config /tmp/admin_client.properties --alter --add-config 'SCRAM-SHA-512=[password=admin-secret]' --entity-type users --entity-name admin &&
        kafka-configs --bootstrap-server localhost:9093 --command-config /tmp/admin_client.properties --alter --add-config 'SCRAM-SHA-512=[password=testuser-secret]' --entity-type users --entity-name testuser &&
        echo 'SCRAM users created successfully'
      "
    volumes:
      - ./docker/kafka/config/kafka_admin_client_plain.conf:/tmp/admin_client.properties
    network_mode: "service:kafka"
    restart: "no"

  # Topic creation for all authentication methods
  kafka-topics:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-topics
    depends_on:
      kafka-scram-users:
        condition: service_completed_successfully
    command: |
      bash -c "
        echo 'Creating topics for all authentication methods...' &&

        # Create topic using PLAINTEXT
        kafka-topics --bootstrap-server localhost:9092 --create --topic test-topic-1 --partitions 4 --replication-factor 1 --if-not-exists &&
        echo 'Topic created' &&

        # Verify topic creation
        kafka-topics --bootstrap-server localhost:9093 --list --command-config /tmp/sasl_plain_client.properties &&

        echo 'All topic operations completed successfully'
      "
    volumes:
      - ./docker/kafka/config/kafka_client_jaas_plain.conf:/tmp/sasl_plain_client.properties
      - ./docker/kafka/config/kafka_client_jaas_scram.conf:/tmp/sasl_scram_client.properties
    network_mode: "service:kafka"
    restart: "no"

networks:
  hydra:
  hydra-2:
  nats:
  postgres:

volumes:
  hydra-sqlite:
  hydra-2-sqlite:
  postgres-data:
  kafka-data:
