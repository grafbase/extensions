//!file:grafbase/options.proto
syntax = "proto2";

import "google/protobuf/descriptor.proto";

package grafbase.graphql;

extend google.protobuf.MessageOptions {
  optional string object_directives = 58301;
  optional string input_object_directives = 58302;
}

extend google.protobuf.FieldOptions {
  optional string output_field_directives = 58301;
  optional string input_field_directives = 58302;
}

extend google.protobuf.EnumOptions {
  optional string enum_directives = 58301;
}

extend google.protobuf.EnumValueOptions {
  optional string enum_value_directives = 58301;
}

extend google.protobuf.ServiceOptions {
  optional bool default_to_query_fields = 58301;
  optional bool default_to_mutation_fields = 58302;
  optional string subgraph_name = 58303;
}

extend google.protobuf.MethodOptions {
  optional string directives = 58301;
  optional bool is_query = 58302;
  optional bool is_mutation = 58303;
}

//!file:multi_subgraph.proto
syntax = "proto3";

import "grafbase/options.proto";

package example;

// Shared types
message User {
  string id = 1;
  string name = 2;
  string email = 3;
}

message Product {
  string id = 1;
  string name = 2;
  double price = 3;
  string owner_id = 4;
}

message Order {
  string id = 1;
  string user_id = 2;
  repeated string product_ids = 3;
  double total = 4;
}

// User service - will go to users subgraph
service UserService {
  option (grafbase.graphql.subgraph_name) = "users";

  rpc GetUser(GetUserRequest) returns (User);
  rpc CreateUser(CreateUserRequest) returns (User);
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse);
}

message GetUserRequest {
  string id = 1;
}

message CreateUserRequest {
  string name = 1;
  string email = 2;
}

message ListUsersRequest {
  int32 limit = 1;
  string cursor = 2;
}

message ListUsersResponse {
  repeated User users = 1;
  string next_cursor = 2;
}

// Product service - will go to products subgraph
service ProductService {
  option (grafbase.graphql.subgraph_name) = "products";

  rpc GetProduct(GetProductRequest) returns (Product);
  rpc CreateProduct(CreateProductRequest) returns (Product);
  rpc ListProducts(ListProductsRequest) returns (ListProductsResponse);
}

message GetProductRequest {
  string id = 1;
}

message CreateProductRequest {
  string name = 1;
  double price = 2;
  string owner_id = 3;
}

message ListProductsRequest {
  int32 limit = 1;
  string cursor = 2;
}

message ListProductsResponse {
  repeated Product products = 1;
  string next_cursor = 2;
}

// Order service - will go to orders subgraph  
service OrderService {
  option (grafbase.graphql.subgraph_name) = "orders";

  rpc CreateOrder(CreateOrderRequest) returns (Order);
  rpc GetOrder(GetOrderRequest) returns (Order);
}

message GetOrderRequest {
  string id = 1;
}

message CreateOrderRequest {
  string user_id = 1;
  repeated string product_ids = 2;
}

// Analytics service - has no subgraph_name, so will be ignored in multi-file mode
service AnalyticsService {
  rpc GetStats(GetStatsRequest) returns (GetStatsResponse);
}

message GetStatsRequest {
  string from_date = 1;
  string to_date = 2;
}

message GetStatsResponse {
  int32 total_orders = 1;
  double total_revenue = 2;
}