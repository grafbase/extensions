---
source: cli/protoc-gen-grafbase-subgraph/tests/codegen_tests.rs
expression: combined_output
input_file: cli/protoc-gen-grafbase-subgraph/tests/testcases/inventory.proto
---
#--- schema.graphql ---#

extend schema
  @link(url: "https://grafbase.com/extensions/grpc/0.2.0", import: ["@protoServices", "@protoEnums", "@protoMessages", "@grpcMethod"])
  @protoServices(
    definitions: [
      {
        name: "test.inventory.SearchService"
        methods: [
          {
            name: "Search"
            inputType: ".test.inventory.SearchRequest"
            outputType: ".test.inventory.SearchResponse"
          }
        ]
      }
      {
        name: "test.inventory.SearchService2"
        methods: [
          {
            name: "Search2"
            inputType: ".test.inventory.SearchRequest"
            outputType: ".test.inventory.SearchResponse"
          }
        ]
      }
      {
        name: "test.inventory.SearchService3"
        methods: [
          {
            name: "Search3"
            inputType: ".test.inventory.SearchRequest"
            outputType: ".test.inventory.SearchResponse"
          }
        ]
      }
    ]
  )
  @protoMessages(
    definitions: [
      {
        name: ".test.inventory.SearchResponse"
        fields: [
          {
            name: "id"
            number: 1
            repeated: false
            type: "string"
          }
        ]
      }
      {
        name: ".test.inventory.SearchRequest"
        fields: [
          {
            name: "query"
            number: 1
            repeated: false
            type: "string"
          }
          {
            name: "colorFilter"
            number: 2
            repeated: false
            type: ".test.inventory.Color"
          }
        ]
      }
    ]
  )
  @protoEnums(
    definitions: [
      {
        name: ".test.inventory.Color"
        values: [
          {
            name: "RED"
            number: 0
          }
          {
            name: "GREEN"
            number: 1
          }
          {
            name: "BLUE"
            number: 2
          }
        ]
      }
    ]
  )

type Query {
  test_inventory_SearchService_Search(input: test_inventory_SearchRequestInput): test_inventory_SearchResponse @grpcMethod(service: "test.inventory.SearchService", method: "Search")
  test_inventory_SearchService2_Search2(input: test_inventory_SearchRequestInput): test_inventory_SearchResponse @grpcMethod(service: "test.inventory.SearchService2", method: "Search2") @lookup
}

type Mutation {
  test_inventory_SearchService3_Search3(input: test_inventory_SearchRequestInput): test_inventory_SearchResponse @grpcMethod(service: "test.inventory.SearchService3", method: "Search3")
}

"64 bit signed integer" scalar I64
"64 bit unsigned integer" scalar U64

input test_inventory_SearchRequestInput @oneOf {
  query: String @deprecated(reason: "Use QueryV2")
  colorFilter: test_inventory_Color
}

type test_inventory_SearchResponse @key(fields: "id") {
  id: String @deprecated(reason: "Use IDV2")
}

enum test_inventory_Color @deprecated(reason: "Use ColorV2") {
  RED @deprecated @tag(name: "private"),
  GREEN,
  BLUE @deprecated,
}
