---
source: cli/protoc-gen-grafbase-subgraph/tests/codegen_tests.rs
expression: combined_output
input_file: cli/protoc-gen-grafbase-subgraph/tests/testcases/composite_schemas_entity_no_duplicate.proto
---
#--- schema.graphql ---#

extend schema
  @link(url: "https://grafbase.com/extensions/grpc/0.2.0", import: ["@protoServices", "@protoEnums", "@protoMessages", "@grpcMethod"])
  @link(url: "https://specs.grafbase.com/composite-schemas/v1", import: ["@key", "@derive", "@is"])
  @protoServices(
    definitions: [
      {
        name: "test.nodedup.UserService"
        methods: [
          {
            name: "GetUser"
            inputType: ".test.nodedup.GetUserRequest"
            outputType: ".test.nodedup.User"
          }
          {
            name: "GetPost"
            inputType: ".test.nodedup.GetPostRequest"
            outputType: ".test.nodedup.Post"
          }
          {
            name: "GetProduct"
            inputType: ".test.nodedup.GetProductRequest"
            outputType: ".test.nodedup.Product"
          }
        ]
      }
    ]
  )
  @protoMessages(
    definitions: [
      {
        name: ".test.nodedup.User"
        fields: [
          {
            name: "id"
            number: 1
            repeated: false
            type: "string"
          }
          {
            name: "name"
            number: 2
            repeated: false
            type: "string"
          }
          {
            name: "email"
            number: 3
            repeated: false
            type: "string"
          }
        ]
      }
      {
        name: ".test.nodedup.Post"
        fields: [
          {
            name: "id"
            number: 1
            repeated: false
            type: "string"
          }
          {
            name: "title"
            number: 2
            repeated: false
            type: "string"
          }
          {
            name: "content"
            number: 3
            repeated: false
            type: "string"
          }
          {
            name: "author_id"
            number: 4
            repeated: false
            type: "string"
          }
        ]
      }
      {
        name: ".test.nodedup.Product"
        fields: [
          {
            name: "id"
            number: 1
            repeated: false
            type: "string"
          }
          {
            name: "name"
            number: 2
            repeated: false
            type: "string"
          }
          {
            name: "category_id"
            number: 3
            repeated: false
            type: "string"
          }
        ]
      }
      {
        name: ".test.nodedup.GetUserRequest"
        fields: [
          {
            name: "id"
            number: 1
            repeated: false
            type: "string"
          }
        ]
      }
      {
        name: ".test.nodedup.GetPostRequest"
        fields: [
          {
            name: "id"
            number: 1
            repeated: false
            type: "string"
          }
        ]
      }
      {
        name: ".test.nodedup.GetProductRequest"
        fields: [
          {
            name: "id"
            number: 1
            repeated: false
            type: "string"
          }
        ]
      }
    ]
  )

type Mutation {
  test_nodedup_UserService_GetUser(input: test_nodedup_GetUserRequestInput): test_nodedup_User @grpcMethod(service: "test.nodedup.UserService", method: "GetUser")
  test_nodedup_UserService_GetPost(input: test_nodedup_GetPostRequestInput): test_nodedup_Post @grpcMethod(service: "test.nodedup.UserService", method: "GetPost")
  test_nodedup_UserService_GetProduct(input: test_nodedup_GetProductRequestInput): test_nodedup_Product @grpcMethod(service: "test.nodedup.UserService", method: "GetProduct")
}

"64 bit signed integer" scalar I64
"64 bit unsigned integer" scalar U64

input test_nodedup_GetUserRequestInput {
  id: String
}

input test_nodedup_GetPostRequestInput {
  id: String
}

input test_nodedup_GetProductRequestInput {
  id: String
}

"""
This message is already rendered as output, so it shouldn't
 be rendered again as an entity stub
"""
type test_nodedup_User {
  id: String!
  name: String!
  email: String!
}

"""
This references User, but since User is already rendered,
 we shouldn't create a duplicate User type
"""
type test_nodedup_Post {
  id: String!
  title: String!
  content: String!
  author_id: String!
  author: test_nodedup_User @derive @is(field: "{ id: author_id }")
}

"""
This references a non-existent Category type, so it should
 be rendered as an entity stub
"""
type test_nodedup_Product {
  id: String!
  name: String!
  category_id: String!
  category: Category @derive @is(field: "{ id: category_id }")
}

type Category @key(fields: "id") {
  id: String!
}
