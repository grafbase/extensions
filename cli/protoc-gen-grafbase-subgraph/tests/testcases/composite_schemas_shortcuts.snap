---
source: cli/protoc-gen-grafbase-subgraph/tests/codegen_tests.rs
assertion_line: 158
expression: combined_output
input_file: cli/protoc-gen-grafbase-subgraph/tests/testcases/composite_schemas_shortcuts.proto
---
#--- schema.graphql ---#

extend schema
  @link(url: "https://grafbase.com/extensions/grpc/0.2.0", import: ["@protoServices", "@protoEnums", "@protoMessages", "@grpcMethod"])
  @link(url: "https://specs.grafbase.com/composite-schemas/v1", import: ["@key", "@derive", "@is", "@lookup", "@require"])
  @protoServices(
    definitions: [
      {
        name: "test.composite_schemas.UserService"
        methods: [
          {
            name: "GetUser"
            inputType: ".test.composite_schemas.GetUserRequest"
            outputType: ".test.composite_schemas.User"
          }
          {
            name: "ListUsers"
            inputType: ".test.composite_schemas.ListUsersRequest"
            outputType: ".test.composite_schemas.ListUsersResponse"
          }
        ]
      }
      {
        name: "test.composite_schemas.ProductService"
        methods: [
          {
            name: "GetProduct"
            inputType: ".test.composite_schemas.GetProductRequest"
            outputType: ".test.composite_schemas.Product"
          }
          {
            name: "FindProductByName"
            inputType: ".test.composite_schemas.FindProductByNameRequest"
            outputType: ".test.composite_schemas.Product"
          }
        ]
      }
      {
        name: "test.composite_schemas.InventoryService"
        methods: [
          {
            name: "GetOrderItems"
            inputType: ".test.composite_schemas.GetOrderItemsRequest"
            outputType: ".test.composite_schemas.GetOrderItemsResponse"
          }
        ]
      }
      {
        name: "test.composite_schemas.ShippingService"
        methods: [
          {
            name: "GetShippingStatus"
            inputType: ".test.composite_schemas.GetShippingStatusRequest"
            outputType: ".test.composite_schemas.GetShippingStatusResponse"
          }
        ]
      }
      {
        name: "test.composite_schemas.OrderService"
        methods: [
          {
            name: "GetOrder"
            inputType: ".test.composite_schemas.GetOrderRequest"
            outputType: ".test.composite_schemas.Order"
          }
        ]
      }
    ]
  )
  @protoMessages(
    definitions: [
      {
        name: ".test.composite_schemas.User"
        fields: [
          {
            name: "id"
            number: 1
            repeated: false
            type: "string"
          }
          {
            name: "email"
            number: 2
            repeated: false
            type: "string"
          }
          {
            name: "name"
            number: 3
            repeated: false
            type: "string"
          }
        ]
      }
      {
        name: ".test.composite_schemas.Product"
        fields: [
          {
            name: "id"
            number: 1
            repeated: false
            type: "string"
          }
          {
            name: "name"
            number: 2
            repeated: false
            type: "string"
          }
          {
            name: "brand_id"
            number: 3
            repeated: false
            type: "string"
          }
          {
            name: "owner_id"
            number: 4
            repeated: false
            type: "string"
          }
          {
            name: "category_slug"
            number: 5
            repeated: false
            type: "string"
          }
        ]
      }
      {
        name: ".test.composite_schemas.Order"
        fields: [
          {
            name: "id"
            number: 1
            repeated: false
            type: "string"
          }
          {
            name: "customer_id"
            number: 2
            repeated: false
            type: "string"
          }
          {
            name: "tracking_number"
            number: 3
            repeated: false
            type: "string"
          }
        ]
      }
      {
        name: ".test.composite_schemas.GetOrderItemsRequest"
        fields: [
          {
            name: "order_id"
            number: 1
            repeated: false
            type: "string"
          }
        ]
      }
      {
        name: ".test.composite_schemas.GetOrderItemsResponse"
        fields: [
          {
            name: "items"
            number: 1
            repeated: true
            type: ".test.composite_schemas.OrderItem"
          }
        ]
      }
      {
        name: ".test.composite_schemas.OrderItem"
        fields: [
          {
            name: "id"
            number: 1
            repeated: false
            type: "string"
          }
          {
            name: "product_id"
            number: 2
            repeated: false
            type: "string"
          }
          {
            name: "quantity"
            number: 3
            repeated: false
            type: "int32"
          }
        ]
      }
      {
        name: ".test.composite_schemas.GetShippingStatusRequest"
        fields: [
          {
            name: "tracking_number"
            number: 1
            repeated: false
            type: "string"
          }
        ]
      }
      {
        name: ".test.composite_schemas.GetShippingStatusResponse"
        fields: [
          {
            name: "status"
            number: 1
            repeated: false
            type: "string"
          }
          {
            name: "estimated_delivery"
            number: 2
            repeated: false
            type: "string"
          }
        ]
      }
      {
        name: ".test.composite_schemas.GetUserRequest"
        fields: [
          {
            name: "user_id"
            number: 1
            repeated: false
            type: "string"
          }
        ]
      }
      {
        name: ".test.composite_schemas.GetProductRequest"
        fields: [
          {
            name: "product_id"
            number: 1
            repeated: false
            type: "string"
          }
        ]
      }
      {
        name: ".test.composite_schemas.FindProductByNameRequest"
        fields: [
          {
            name: "name"
            number: 1
            repeated: false
            type: "string"
          }
        ]
      }
      {
        name: ".test.composite_schemas.GetOrderRequest"
        fields: [
          {
            name: "order_id"
            number: 1
            repeated: false
            type: "string"
          }
        ]
      }
      {
        name: ".test.composite_schemas.ListUsersRequest"
        fields: [
          {
            name: "limit"
            number: 1
            repeated: false
            type: "int32"
          }
          {
            name: "offset"
            number: 2
            repeated: false
            type: "int32"
          }
        ]
      }
      {
        name: ".test.composite_schemas.ListUsersResponse"
        fields: [
          {
            name: "users"
            number: 1
            repeated: true
            type: ".test.composite_schemas.User"
          }
          {
            name: "total_count"
            number: 2
            repeated: false
            type: "int32"
          }
        ]
      }
    ]
  )

type Query {
"""
Test lookup directive
"""
  test_composite_schemas_UserService_GetUser(input: test_composite_schemas_GetUserRequestInput @is(field: "{ user_id: user.id }")): test_composite_schemas_User @grpcMethod(service: "test.composite_schemas.UserService", method: "GetUser") @lookup
"""
Regular query without lookup
"""
  test_composite_schemas_UserService_ListUsers(input: test_composite_schemas_ListUsersRequestInput): test_composite_schemas_ListUsersResponse @grpcMethod(service: "test.composite_schemas.UserService", method: "ListUsers")
"""
Another lookup example with argument_is
"""
  test_composite_schemas_ProductService_GetProduct(input: test_composite_schemas_GetProductRequestInput @is(field: "{ product_id: product.id }")): test_composite_schemas_Product @grpcMethod(service: "test.composite_schemas.ProductService", method: "GetProduct") @lookup
"""
Lookup without argument_is - should not generate @is
"""
  test_composite_schemas_ProductService_FindProductByName(input: test_composite_schemas_FindProductByNameRequestInput): test_composite_schemas_Product @grpcMethod(service: "test.composite_schemas.ProductService", method: "FindProductByName") @lookup
}

type Mutation {
  test_composite_schemas_InventoryService_GetOrderItems(input: test_composite_schemas_GetOrderItemsRequestInput): test_composite_schemas_GetOrderItemsResponse @grpcMethod(service: "test.composite_schemas.InventoryService", method: "GetOrderItems")
  test_composite_schemas_ShippingService_GetShippingStatus(input: test_composite_schemas_GetShippingStatusRequestInput): test_composite_schemas_GetShippingStatusResponse @grpcMethod(service: "test.composite_schemas.ShippingService", method: "GetShippingStatus")
  test_composite_schemas_OrderService_GetOrder(input: test_composite_schemas_GetOrderRequestInput): test_composite_schemas_Order @grpcMethod(service: "test.composite_schemas.OrderService", method: "GetOrder")
}

"64 bit signed integer" scalar I64
"64 bit unsigned integer" scalar U64

"""
Test messages for join fields
"""
input test_composite_schemas_GetOrderItemsRequestInput {
  order_id: String
}

input test_composite_schemas_GetShippingStatusRequestInput {
  tracking_number: String
}

"""
Test for lookup directive
"""
input test_composite_schemas_GetUserRequestInput {
  user_id: String
}

input test_composite_schemas_GetProductRequestInput {
  product_id: String
}

input test_composite_schemas_FindProductByNameRequestInput {
  name: String
}

input test_composite_schemas_GetOrderRequestInput {
  order_id: String
}

"""
Supporting messages
"""
input test_composite_schemas_ListUsersRequestInput {
  limit: Int
  offset: Int
}

"""
Test for key directive shortcut
"""
type test_composite_schemas_User @key(fields: "id") @key(fields: "email") {
  id: String!
  email: String!
  name: String!
}

"""
Test for derive_field directive
"""
type test_composite_schemas_Product {
  id: String!
  name: String!
  brand_id: String!
  owner_id: String!
  category_slug: String!
  brand: Brand @derive @is(field: "{ id: brand_id }")
  owner: User @derive @is(field: "{ id: owner_id }")
  primaryCategory: Category @derive @is(field: "{ slug: category_slug }")
}

"""
Test for join_field directive
"""
type test_composite_schemas_Order @key(fields: "id") {
  id: String!
  customer_id: String!
  tracking_number: String!
  orderItems(input: test_composite_schemas_GetOrderItemsRequestInput @require(field: "{ order_id: id }")): test_composite_schemas_GetOrderItemsResponse @grpcMethod(service: "test.composite_schemas.InventoryService", method: "GetOrderItems")
  shippingStatus(input: test_composite_schemas_GetShippingStatusRequestInput @require(field: "{ tracking_number: tracking_number }")): test_composite_schemas_GetShippingStatusResponse @grpcMethod(service: "test.composite_schemas.ShippingService", method: "GetShippingStatus")
}

type test_composite_schemas_GetOrderItemsResponse {
  items: [test_composite_schemas_OrderItem!]
}

type test_composite_schemas_OrderItem {
  id: String!
  product_id: String!
  quantity: Int!
}

type test_composite_schemas_GetShippingStatusResponse {
  status: String!
  estimated_delivery: String!
}

type test_composite_schemas_ListUsersResponse {
  users: [test_composite_schemas_User!]
  total_count: Int!
}

type Brand @key(fields: "id") {
  id: String!
}

type Category @key(fields: "slug") {
  slug: String!
}

type User @key(fields: "id") {
  id: String!
}
